{"id":"../../../node_modules/@ds.e/react/lib/molecules/Select/index.js","dependencies":[{"name":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\node_modules\\@ds.e\\react\\lib\\molecules\\Select\\index.js.map","includedInParent":true,"mtime":1660909095387},{"name":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\playgrounds\\react\\package.json","includedInParent":true,"mtime":1660813455188},{"name":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\node_modules\\@ds.e\\react\\package.json","includedInParent":true,"mtime":1660898616513},{"name":"react","loc":{"line":1,"column":62,"index":62},"parent":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\node_modules\\@ds.e\\react\\lib\\molecules\\Select\\index.js","resolved":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\node_modules\\react\\index.js"},{"name":"../../atoms/Text/index.js","loc":{"line":2,"column":17,"index":88},"parent":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\node_modules\\@ds.e\\react\\lib\\molecules\\Select\\index.js","resolved":"D:\\Developer\\Frontend\\React_Engineers_Implementation\\node_modules\\@ds.e\\react\\lib\\atoms\\Text\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _index = _interopRequireDefault(require(\"../../atoms/Text/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst KEY_CODES = {\n  ENTER: 13,\n  SPACE: 32,\n  DOWN_ARROW: 40,\n  ESC: 27,\n  UP_ARROW: 38\n};\n\nconst getNextOptionIndex = (currentIndex, options) => {\n  if (currentIndex === null) {\n    return 0;\n  }\n\n  if (currentIndex === options.length - 1) {\n    return 0;\n  }\n\n  return currentIndex + 1;\n};\n\nconst getPrevOptionIndex = (currentIndex, options) => {\n  if (currentIndex === null) {\n    return 0;\n  }\n\n  if (currentIndex === 0) {\n    return options.length - 1;\n  }\n\n  return currentIndex - 1;\n};\n\nconst Select = ({\n  options = [],\n  label = 'Please select an option...',\n  onOptionSelected,\n  renderOption\n}) => {\n  const labelRef = (0, _react.useRef)(null);\n  const [selectedIndex, setSelectedIndex] = (0, _react.useState)();\n  const [isOpen, setIsOpen] = (0, _react.useState)(false);\n  const [overlayTop, setOverlayTop] = (0, _react.useState)();\n  const [optionRefs, setOptionRefs] = (0, _react.useState)();\n  const [highlightIndex, setHighlightIndex] = (0, _react.useState)();\n\n  const onOptionHandler = (option, index) => {\n    if (onOptionSelected) {\n      onOptionSelected(option, index);\n    }\n\n    setSelectedIndex(index);\n    setIsOpen(false);\n  };\n\n  const onToggleList = () => {\n    setIsOpen(state => !state);\n  };\n\n  (0, _react.useEffect)(() => {\n    setOverlayTop((labelRef.current?.offsetHeight || 0) + 10);\n  }, [labelRef.current?.offsetHeight]);\n  let selectedOption = null;\n\n  if (selectedIndex !== null && typeof selectedIndex == 'number') {\n    selectedOption = options[selectedIndex];\n  }\n\n  const highlightItem = index => {\n    setHighlightIndex(index);\n  };\n\n  const onButtonKeyDown = e => {\n    e.preventDefault();\n\n    if ([KEY_CODES.ENTER, KEY_CODES.SPACE, KEY_CODES.DOWN_ARROW].includes(e.keyCode)) {\n      setIsOpen(true); //set focus on list item\n\n      highlightItem(0);\n    }\n  };\n\n  (0, _react.useEffect)(() => {\n    setOptionRefs(options.map(_ => (0, _react.createRef)()));\n  }, [options.length]);\n  (0, _react.useEffect)(() => {\n    if (typeof highlightIndex == 'number' && isOpen) {\n      const ref = optionRefs[highlightIndex];\n      console.log(highlightIndex, ref);\n\n      if (ref && ref.current) {\n        ref.current.focus();\n      }\n    }\n  }, [isOpen, highlightIndex]);\n\n  const onOptionKeyDown = e => {\n    if (e.keyCode == KEY_CODES.ESC) {\n      setIsOpen(false);\n      return;\n    }\n\n    if (e.keyCode === KEY_CODES.DOWN_ARROW && typeof highlightIndex == 'number') {\n      highlightItem(getNextOptionIndex(highlightIndex, options));\n    }\n\n    if (e.keyCode === KEY_CODES.UP_ARROW && typeof highlightIndex == 'number') {\n      highlightItem(getPrevOptionIndex(highlightIndex, options));\n    }\n\n    if (e.keyCode === KEY_CODES.ENTER && typeof highlightIndex == 'number') {\n      onOptionHandler(options[highlightIndex], highlightIndex);\n    }\n  };\n\n  return _react.default.createElement(\"div\", {\n    className: 'dse-select'\n  }, _react.default.createElement(\"button\", {\n    \"data-testid\": 'DseSelectButton',\n    onKeyDown: onButtonKeyDown,\n    ref: labelRef,\n    \"aria-expanded\": isOpen ? true : undefined,\n    \"aria-haspopup\": true,\n    \"aria-controls\": 'dse-select-list',\n    className: 'dse-select__label',\n    onClick: () => {\n      onToggleList();\n    }\n  }, _react.default.createElement(\"span\", null, _react.default.createElement(_index.default, null, typeof selectedIndex !== 'number' ? label : selectedOption?.label || 'Please select an option...')), _react.default.createElement(\"svg\", {\n    className: `dse-select__caret ${isOpen ? 'dse-select__caret--open' : 'dse-select__caret--close'}`,\n    width: '1rem',\n    height: '1rem',\n    fill: \"none\",\n    stroke: \"currentColor\",\n    viewBox: \"0 0 24 24\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, _react.default.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"M19 9l-7 7-7-7\"\n  }))), isOpen && _react.default.createElement(\"ul\", {\n    onKeyDown: onOptionKeyDown,\n    id: 'dse-select-list',\n    style: {\n      top: overlayTop\n    },\n    className: 'dse-select__overlay'\n  }, options.map((option, index) => {\n    const isSelected = selectedIndex == index;\n    const isHighlighted = highlightIndex == index;\n    const ref = optionRefs[index];\n    const renderOntionProps = {\n      option,\n      isSelected,\n      getOptionRecommendedProps: (overrideProps = {}) => ({\n        className: `dse-select__option ${isSelected ? 'dse-select__option--selected' : ''} ${isHighlighted ? 'dse-select__option--highlighted' : ''}`,\n        'aria-checked': isSelected ? true : undefined,\n        'aria-label': option.label,\n        role: 'menuitemradio',\n        key: option.value,\n        ref,\n        tabIndex: isHighlighted ? -1 : 0,\n        onMouseEnter: () => highlightItem(index),\n        onMouseLeave: () => highlightItem(null),\n        onClick: () => onOptionHandler(option, index),\n        ...overrideProps\n      })\n    };\n\n    if (renderOption) {\n      return renderOption(renderOntionProps);\n    }\n\n    return _react.default.createElement(\"li\", { ...renderOntionProps.getOptionRecommendedProps(),\n      key: index\n    }, _react.default.createElement(_index.default, null, option.label), isSelected && _react.default.createElement(\"svg\", {\n      width: '1rem',\n      height: '1rem',\n      fill: \"none\",\n      stroke: \"currentColor\",\n      viewBox: \"0 0 24 24\",\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }, _react.default.createElement(\"path\", {\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      strokeWidth: 2,\n      d: \"M5 13l4 4L19 7\"\n    })));\n  })));\n};\n\nexports.default = Select;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"90e56c2d1baa1ee68e08f6ca86ea13f6","cacheData":{"env":{}}}